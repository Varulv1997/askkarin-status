@mixin _assert-ascending($map, $map-name){@each $key, $num in $map {
    @if $prev-num == null or unit($num) == "%" or unit($prev-num) == "%" {;}@else if not comparable($prev-num, $num){@warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";}@else if $prev-num >= $num{@warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";}@return $string;@function color-level($color: $primary, $level: 0){@return mix($color-base, $color, $level * $theme-color-interval);}@function tint-color($color, $level){@return mix(white, $color, $level * $theme-color-interval);}@function shade-color($color, $level){@return mix(black, $color, $level * $theme-color-interval);}@function add($value1, $value2, $return-calc: true){@if $value1 == null {
    @return $value2;}@if $value2 == null{@return $value1;}@if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2){@return $value1 + $value2;}@return if($return-calc == true, calc(#{$value1} + #{$value2}), $value1 + unquote(" + ") + $value2);@if $value1 == null{@return -$value2;}@if $value2 == null{@return $value1;}@if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2){@return $value1 - $value2;}@return if($return-calc == true, calc(#{$value1} - #{$value2}), $value1 + unquote(" - ") + $value2);